{"version":3,"sources":["theme/globalStyle.js","App.js","serviceWorker.js","index.js"],"names":["GlobalStyle","createGlobalStyle","AppWrapper","styled","div","Idk","Headline","Social","App","href","icon","faLinkedin","faGithub","faStackExchange","faYoutube","faCodepen","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yjBAEA,IAAMA,EAAcC,YAAH,K,cCMXC,EAAaC,IAAOC,IAAV,kEAAGD,CAAH,0DAMVE,EAAMF,IAAOC,IAAV,2DAAGD,CAAH,kBAIHG,EAAWH,IAAOC,IAAV,gEAAGD,CAAH,oJAURI,EAASJ,IAAOC,IAAV,8DAAGD,CAAH,8EA+BGK,E,iLAtBX,OACI,oCACI,kBAACR,EAAD,MACA,kBAACE,EAAD,KACI,kBAACG,EAAD,KACI,kBAACC,EAAD,8BADJ,+BAGI,kBAACC,EAAD,KACI,uBAAGE,KAAK,uCAAsC,kBAAC,IAAD,CAAiBC,KAAMC,OACrE,uBAAGF,KAAK,8BAA6B,kBAAC,IAAD,CAAiBC,KAAME,OAC5D,uBAAGH,KAAK,wDAAuD,kBAAC,IAAD,CAAiBC,KAAMG,OACtF,uBAAGJ,KAAK,4DAA2D,kBAAC,IAAD,CAAiBC,KAAMI,OAC1F,uBAAGL,KAAK,8BAA6B,kBAAC,IAAD,CAAiBC,KAAMK,OAC5D,uBAAGN,KAAK,yCAAwC,uBAAGO,UAAU,+B,GAfnEC,aCvBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCRNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5bc5470d.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components/macro';\n\nconst GlobalStyle = createGlobalStyle`\n  @import url(â€˜https://fonts.googleapis.com/css?family=Montserrat:400,900|Roboto');\n\n  body {\n    padding: 0;\n    margin: 0;\n    font-family: Roboto, sans-serif;\n  }\n\n  h1 {\n    font-family: Montserrat\n  }\n`;\n\nexport { GlobalStyle };\n","import React, { Component } from 'react';\nimport styled from 'styled-components/macro';\n\nimport { GlobalStyle } from './theme/globalStyle';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faLinkedin, faGithub, faStackExchange, faYoutube, faCodepen } from '@fortawesome/free-brands-svg-icons'\n\nconst AppWrapper = styled.div`\n    margin-top: 20px;\n    display: flex;\n    justify-content: center;\n`;\n\nconst Idk = styled.div`\n    width: 400px;\n`;\n\nconst Headline = styled.div`\n  background: transparent;\n  border-radius: 3px;\n  border: 2px solid palevioletred;\n  color: palevioletred;\n  margin: 1em 0;\n  padding: 0.25em 1em;\n  text-align: center;\n`;\n\nconst Social = styled.div`\n    margin-top: 20px;\n    font-size:2em;\n    display: flex;\n    justify-content: space-evenly;\n`;\n\nclass App extends Component {\n  render() {\n    return (\n        <>\n            <GlobalStyle />\n            <AppWrapper>\n                <Idk>\n                    <Headline>welcome to my website</Headline>\n                    I might put stuff here later\n                    <Social>\n                        <a href=\"https://www.linkedin.com/in/jy14898\"><FontAwesomeIcon icon={faLinkedin}/></a>\n                        <a href=\"https://github.com/jy14898\"><FontAwesomeIcon icon={faGithub}/></a>\n                        <a href=\"https://stackexchange.com/users/7246868/joseph-young\"><FontAwesomeIcon icon={faStackExchange}/></a>\n                        <a href=\"https://www.youtube.com/channel/UCgPjQ2V3APd4wv7myjEZoBA\"><FontAwesomeIcon icon={faYoutube}/></a>\n                        <a href=\"https://codepen.io/jy14898\"><FontAwesomeIcon icon={faCodepen}/></a>\n                        <a href=\"https://orcid.org/0000-0003-1330-0515\"><i className=\"ai ai-orcid ai-1x\"></i></a>\n                    </Social>\n                </Idk>\n            </AppWrapper>\n        </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'modern-normalize/modern-normalize.css';\nimport 'academicons/css/academicons.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}